// PUBLISH-CODE
/*
Copyright Â© 2022 Bitnami

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This code is taken from github.com/bitnami/charts/bitnami/redis and extensively modified.

package marketplaceapps

import (
	"fmt"

	apps "go.tectonic.network/lib/k8s/imp/api/apps/v1"
	core "go.tectonic.network/lib/k8s/imp/api/core/v1"
	"go.tectonic.network/lib/k8s/intstr"
	meta "go.tectonic.network/lib/k8s/meta/v1"
	"go.tectonic.network/lib/ptr"
)

func redisInstructions(name, namespace string) string {
	selector := fmt.Sprintf("app.kubernetes.io/name=redis,app.kubernetes.io/instance=%s", name)
	serviceName := fmt.Sprintf("%s-redis-master", name)
	return fmt.Sprintf(`The app is ready to use when all pods returned by "kubectl get pods -n %s --selector %s" are in state "Running".
Redis is accessible through the service %q, in namespace %q.`, namespace, selector, serviceName, namespace)
}

func redisConfig(name, namespace string) []any {
	return []any{
		&core.ServiceAccount{
			TypeMeta: meta.TypeMeta{
				Kind:       "ServiceAccount",
				APIVersion: "v1",
			},
			ObjectMeta: meta.ObjectMeta{
				Name:      name + "-redis",
				Namespace: namespace,
				Labels: map[string]string{
					"app.kubernetes.io/instance": name,
					"app.kubernetes.io/name":     "redis",
				},
			},
			AutomountServiceAccountToken: ptr.Alloc(true),
		},
		&core.Secret{
			TypeMeta: meta.TypeMeta{
				Kind:       "Secret",
				APIVersion: "v1",
			},
			ObjectMeta: meta.ObjectMeta{
				Name:      name + "-redis",
				Namespace: namespace,
				Labels: map[string]string{
					"app.kubernetes.io/instance": name,
					"app.kubernetes.io/name":     "redis",
				},
			},
			Data: map[string]core.SecretData{
				"redis-password": []byte(""),
			},
			Type: "Opaque",
		},
		&core.ConfigMap{
			TypeMeta: meta.TypeMeta{
				Kind:       "ConfigMap",
				APIVersion: "v1",
			},
			ObjectMeta: meta.ObjectMeta{
				Name:      name + "-redis-configuration",
				Namespace: namespace,
				Labels: map[string]string{
					"app.kubernetes.io/instance": name,
					"app.kubernetes.io/name":     "redis",
				},
			},
			Data: map[string]string{
				"master.conf":  "dir /data\n# User-supplied master configuration:\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\"\n# End of master configuration",
				"redis.conf":   "# User-supplied common configuration:\n# Enable AOF https://redis.io/topics/persistence#append-only-file\nappendonly yes\n# Disable RDB persistence, AOF persistence already enabled.\nsave \"\"\n# End of common configuration",
				"replica.conf": "dir /data\nslave-read-only yes\n# User-supplied replica configuration:\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\"\n# End of replica configuration",
			},
		},
		&core.ConfigMap{
			TypeMeta: meta.TypeMeta{
				Kind:       "ConfigMap",
				APIVersion: "v1",
			},
			ObjectMeta: meta.ObjectMeta{
				Name:      name + "-redis-health",
				Namespace: namespace,
				Labels: map[string]string{
					"app.kubernetes.io/instance": name,
					"app.kubernetes.io/name":     "redis",
				},
			},
			Data: map[string]string{
				"ping_liveness_local.sh":             "#!/bin/bash\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\nif [ \"$response\" != \"PONG\" ] && [ \"$responseFirstWord\" != \"LOADING\" ] && [ \"$responseFirstWord\" != \"MASTERDOWN\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
				"ping_liveness_local_and_master.sh":  "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_liveness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_liveness_master.sh\" $1 || exit_status=$?\nexit $exit_status",
				"ping_liveness_master.sh":            "#!/bin/bash\n\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\"$(< \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_MASTER_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nresponseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')\nif [ \"$response\" != \"PONG\" ] && [ \"$responseFirstWord\" != \"LOADING\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
				"ping_readiness_local.sh":            "#!/bin/bash\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
				"ping_readiness_local_and_master.sh": "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_readiness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_readiness_master.sh\" $1 || exit_status=$?\nexit $exit_status",
				"ping_readiness_master.sh":           "#!/bin/bash\n\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\"$(< \"${REDIS_MASTER_PASSWORD_FILE}\")\"\n[[ -n \"$REDIS_MASTER_PASSWORD\" ]] && export REDISCLI_AUTH=\"$REDIS_MASTER_PASSWORD\"\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$?\" -eq \"124\" ]; then\n  echo \"Timed out\"\n  exit 1\nfi\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
			},
		},
		&core.ConfigMap{
			TypeMeta: meta.TypeMeta{
				Kind:       "ConfigMap",
				APIVersion: "v1",
			},
			ObjectMeta: meta.ObjectMeta{
				Name:      name + "-redis-scripts",
				Namespace: namespace,
				Labels: map[string]string{
					"app.kubernetes.io/instance": name,
					"app.kubernetes.io/name":     "redis",
				},
			},
			Data: map[string]string{
				"start-master.sh":  "#!/bin/bash\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\nif [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\nfi\nif [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\nfi\nARGS=(\"--port\" \"${REDIS_PORT}\")\nARGS+=(\"--requirepass\" \"${REDIS_PASSWORD}\")\nARGS+=(\"--protected-mode no\")\nARGS+=(\"--masterauth\" \"${REDIS_PASSWORD}\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/master.conf\")\nexec redis-server \"${ARGS[@]}\"\n",
				"start-replica.sh": "#!/bin/bash\n\nget_port() {\n    hostname=\"$1\"\n    type=\"$2\"\n\n    port_var=$(echo \"${hostname^^}_SERVICE_PORT_$type\" | sed \"s/-/_/g\")\n    port=${!port_var}\n\n    if [ -z \"$port\" ]; then\n        case $type in\n            \"SENTINEL\")\n                echo 26379\n                ;;\n            \"REDIS\")\n                echo 6379\n                ;;\n        esac\n    else\n        echo $port\n    fi\n}\n\nget_full_hostname() {\n    hostname=\"$1\"\n    echo \"${hostname}.${HEADLESS_SERVICE}\"\n}\n\nREDISPORT=$(get_port \"$HOSTNAME\" \"REDIS\")\n\n[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD=\"$(< \"${REDIS_PASSWORD_FILE}\")\"\n[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD=\"$(< \"${REDIS_MASTER_PASSWORD_FILE}\")\"\nif [[ ! -f /opt/bitnami/redis/etc/replica.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf\nfi\nif [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then\n    cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\nfi\n\necho \"\" >> /opt/bitnami/redis/etc/replica.conf\necho \"replica-announce-port $REDISPORT\" >> /opt/bitnami/redis/etc/replica.conf\necho \"replica-announce-ip $(get_full_hostname \"$HOSTNAME\")\" >> /opt/bitnami/redis/etc/replica.conf\nARGS=(\"--port\" \"${REDIS_PORT}\")\nARGS+=(\"--slaveof\" \"${REDIS_MASTER_HOST}\" \"${REDIS_MASTER_PORT_NUMBER}\")\nARGS+=(\"--requirepass\" \"${REDIS_PASSWORD}\")\nARGS+=(\"--masterauth\" \"${REDIS_MASTER_PASSWORD}\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/replica.conf\")\nexec redis-server \"${ARGS[@]}\"\n",
			},
		},
		&core.Service{
			TypeMeta: meta.TypeMeta{
				Kind:       "Service",
				APIVersion: "v1",
			},
			ObjectMeta: meta.ObjectMeta{
				Name:      name + "-redis-headless",
				Namespace: namespace,
				Labels: map[string]string{
					"app.kubernetes.io/instance": name,
					"app.kubernetes.io/name":     "redis",
				},
			},
			Spec: core.ServiceSpec{
				Ports: []core.ServicePort{
					{
						Name:       "tcp-redis",
						Port:       6379,
						TargetPort: intstr.String("redis"),
					},
				},
				Selector: map[string]string{
					"app.kubernetes.io/instance": name,
					"app.kubernetes.io/name":     "redis",
				},
				ClusterIP: "None",
				Type:      "ClusterIP",
			},
		},
		&core.Service{
			TypeMeta: meta.TypeMeta{
				Kind:       "Service",
				APIVersion: "v1",
			},
			ObjectMeta: meta.ObjectMeta{
				Name:      name + "-redis-master",
				Namespace: namespace,
				Labels: map[string]string{
					"app.kubernetes.io/component": "master",
					"app.kubernetes.io/instance":  name,
					"app.kubernetes.io/name":      "redis",
				},
			},
			Spec: core.ServiceSpec{
				Ports: []core.ServicePort{
					{
						Name:       "tcp-redis",
						Port:       6379,
						TargetPort: intstr.String("redis"),
					},
				},
				Selector: map[string]string{
					"app.kubernetes.io/component": "master",
					"app.kubernetes.io/instance":  name,
					"app.kubernetes.io/name":      "redis",
				},
				Type:            "ClusterIP",
				SessionAffinity: "None",
			},
		},
		&core.Service{
			TypeMeta: meta.TypeMeta{
				Kind:       "Service",
				APIVersion: "v1",
			},
			ObjectMeta: meta.ObjectMeta{
				Name:      name + "-redis-replicas",
				Namespace: namespace,
				Labels: map[string]string{
					"app.kubernetes.io/component": "replica",
					"app.kubernetes.io/instance":  name,
					"app.kubernetes.io/name":      "redis",
				},
			},
			Spec: core.ServiceSpec{
				Ports: []core.ServicePort{
					{
						Name:       "tcp-redis",
						Port:       6379,
						TargetPort: intstr.String("redis"),
					},
				},
				Selector: map[string]string{
					"app.kubernetes.io/component": "replica",
					"app.kubernetes.io/instance":  name,
					"app.kubernetes.io/name":      "redis",
				},
				Type:            "ClusterIP",
				SessionAffinity: "None",
			},
		},
		&apps.StatefulSet{
			TypeMeta: meta.TypeMeta{
				Kind:       "StatefulSet",
				APIVersion: "apps/v1",
			},
			ObjectMeta: meta.ObjectMeta{
				Name:      name + "-redis-master",
				Namespace: namespace,
				Labels: map[string]string{
					"app.kubernetes.io/component": "master",
					"app.kubernetes.io/instance":  name,
					"app.kubernetes.io/name":      "redis",
				},
			},
			Spec: apps.StatefulSetSpec{
				Replicas: ptr.Int32(1),
				Selector: &meta.LabelSelector{
					MatchLabels: map[string]string{
						"app.kubernetes.io/component": "master",
						"app.kubernetes.io/instance":  name,
						"app.kubernetes.io/name":      "redis",
					},
				},
				Template: core.PodTemplateSpec{
					ObjectMeta: meta.ObjectMeta{
						Labels: map[string]string{
							"app.kubernetes.io/component": "master",
							"app.kubernetes.io/instance":  name,
							"app.kubernetes.io/name":      "redis",
						},
						Annotations: map[string]string{
							"checksum/configmap": "139bc95fd1518a61b234f19f6344d6e473435c63266a4a2dfd0db8395ccbb8ca",
							"checksum/health":    "ee176af81a2d0b9a0322ee9f6de47c0c4800391f2662209411ab60d900891ae9",
							"checksum/scripts":   "6a8fcc7593298780d79aa8285204f79775fdacc7ab82bbcb1ff040c733fc8aec",
							"checksum/secret":    "46f45a19950a425ddf66e2b0fd7ebdf3dba0c95157d9ecd1f8ee82f91d9dc917",
						},
					},
					Spec: core.PodSpec{
						Volumes: []core.Volume{
							{
								Name: "start-scripts",
								VolumeSource: core.VolumeSource{
									ConfigMap: &core.ConfigMapVolumeSource{
										LocalObjectReference: core.LocalObjectReference{
											Name: name + "-redis-scripts",
										},
										DefaultMode: ptr.Int32(493),
									},
								},
							},
							{
								Name: "health",
								VolumeSource: core.VolumeSource{
									ConfigMap: &core.ConfigMapVolumeSource{
										LocalObjectReference: core.LocalObjectReference{
											Name: name + "-redis-health",
										},
										DefaultMode: ptr.Int32(493),
									},
								},
							},
							{
								Name: "config",
								VolumeSource: core.VolumeSource{
									ConfigMap: &core.ConfigMapVolumeSource{
										LocalObjectReference: core.LocalObjectReference{
											Name: name + "-redis-configuration",
										},
									},
								},
							},
							{
								Name: "redis-tmp-conf",
								VolumeSource: core.VolumeSource{
									EmptyDir: &core.EmptyDirVolumeSource{},
								},
							},
							{
								Name: "tmp",
								VolumeSource: core.VolumeSource{
									EmptyDir: &core.EmptyDirVolumeSource{},
								},
							},
						},
						Containers: []core.Container{
							{
								Name:  "redis",
								Image: "docker.io/bitnami/redis:6.2.7-debian-11-r3",
								Command: []string{
									"/bin/bash",
								},
								Args: []string{
									"-c",
									"/opt/bitnami/scripts/start-scripts/start-master.sh",
								},
								Ports: []core.ContainerPort{
									{
										Name:          "redis",
										ContainerPort: 6379,
									},
								},
								Env: []core.EnvVar{
									{
										Name:  "BITNAMI_DEBUG",
										Value: "false",
									},
									{
										Name:  "REDIS_REPLICATION_MODE",
										Value: "master",
									},
									{
										Name: "REDIS_PASSWORD",
										ValueFrom: &core.EnvVarSource{
											SecretKeyRef: &core.SecretKeySelector{
												LocalObjectReference: core.LocalObjectReference{
													Name: name + "-redis",
												},
												Key: "redis-password",
											},
										},
									},
									{
										Name:  "REDIS_TLS_ENABLED",
										Value: "no",
									},
									{
										Name:  "REDIS_PORT",
										Value: "6379",
									},
								},
								Resources: core.ResourceRequirements{
									Limits:   core.ResourceList{},
									Requests: core.ResourceList{},
								},
								VolumeMounts: []core.VolumeMount{
									{
										Name:      "start-scripts",
										MountPath: "/opt/bitnami/scripts/start-scripts",
									},
									{
										Name:      "health",
										MountPath: "/health",
									},
									{
										Name:      "redis-data",
										MountPath: "/data",
									},
									{
										Name:      "config",
										MountPath: "/opt/bitnami/redis/mounted-etc",
									},
									{
										Name:      "redis-tmp-conf",
										MountPath: "/opt/bitnami/redis/etc/",
									},
									{
										Name:      "tmp",
										MountPath: "/tmp",
									},
								},
								LivenessProbe: &core.Probe{
									Handler: core.Handler{
										Exec: &core.ExecAction{
											Command: []string{
												"sh",
												"-c",
												"/health/ping_liveness_local.sh 5",
											},
										},
									},
									InitialDelaySeconds: 20,
									TimeoutSeconds:      6,
									PeriodSeconds:       5,
									SuccessThreshold:    1,
									FailureThreshold:    5,
								},
								ReadinessProbe: &core.Probe{
									Handler: core.Handler{
										Exec: &core.ExecAction{
											Command: []string{
												"sh",
												"-c",
												"/health/ping_readiness_local.sh 1",
											},
										},
									},
									InitialDelaySeconds: 20,
									TimeoutSeconds:      2,
									PeriodSeconds:       5,
									SuccessThreshold:    1,
									FailureThreshold:    5,
								},
								ImagePullPolicy: "IfNotPresent",
								SecurityContext: &core.SecurityContext{
									RunAsUser: ptr.Int64(1001),
								},
							},
						},
						TerminationGracePeriodSeconds: ptr.Int64(30),
						ServiceAccountName:            name + "-redis",
						SecurityContext: &core.PodSecurityContext{
							FSGroup: ptr.Int64(1001),
						},
						Affinity: &core.Affinity{
							PodAntiAffinity: &core.PodAntiAffinity{
								PreferredDuringSchedulingIgnoredDuringExecution: []core.WeightedPodAffinityTerm{
									{
										Weight: 1,
										PodAffinityTerm: core.PodAffinityTerm{
											LabelSelector: &meta.LabelSelector{
												MatchLabels: map[string]string{
													"app.kubernetes.io/component": "master",
													"app.kubernetes.io/instance":  name,
													"app.kubernetes.io/name":      "redis",
												},
											},
											Namespaces: []string{
												namespace,
											},
											TopologyKey: "kubernetes.io/hostname",
										},
									},
								},
							},
						},
					},
				},
				VolumeClaimTemplates: []core.PersistentVolumeClaim{
					{
						ObjectMeta: meta.ObjectMeta{
							Name: "redis-data",
							Labels: map[string]string{
								"app.kubernetes.io/component": "master",
								"app.kubernetes.io/instance":  name,
								"app.kubernetes.io/name":      "redis",
							},
						},
						Spec: core.PersistentVolumeClaimSpec{
							AccessModes: []core.PersistentVolumeAccessMode{
								"ReadWriteOnce",
							},
							Resources: core.ResourceRequirements{
								Requests: core.ResourceList{
									"storage": "8Gi",
								},
							},
						},
					},
				},
				ServiceName: name + "-redis-headless",
				UpdateStrategy: apps.StatefulSetUpdateStrategy{
					Type:          "RollingUpdate",
					RollingUpdate: &apps.RollingUpdateStatefulSetStrategy{},
				},
			},
		},
		&apps.StatefulSet{
			TypeMeta: meta.TypeMeta{
				Kind:       "StatefulSet",
				APIVersion: "apps/v1",
			},
			ObjectMeta: meta.ObjectMeta{
				Name:      name + "-redis-replicas",
				Namespace: namespace,
				Labels: map[string]string{
					"app.kubernetes.io/component": "replica",
					"app.kubernetes.io/instance":  name,
					"app.kubernetes.io/name":      "redis",
				},
			},
			Spec: apps.StatefulSetSpec{
				Replicas: ptr.Int32(3),
				Selector: &meta.LabelSelector{
					MatchLabels: map[string]string{
						"app.kubernetes.io/component": "replica",
						"app.kubernetes.io/instance":  name,
						"app.kubernetes.io/name":      "redis",
					},
				},
				Template: core.PodTemplateSpec{
					ObjectMeta: meta.ObjectMeta{
						Labels: map[string]string{
							"app.kubernetes.io/component": "replica",
							"app.kubernetes.io/instance":  name,
							"app.kubernetes.io/name":      "redis",
						},
						Annotations: map[string]string{
							"checksum/configmap": "139bc95fd1518a61b234f19f6344d6e473435c63266a4a2dfd0db8395ccbb8ca",
							"checksum/health":    "ee176af81a2d0b9a0322ee9f6de47c0c4800391f2662209411ab60d900891ae9",
							"checksum/scripts":   "6a8fcc7593298780d79aa8285204f79775fdacc7ab82bbcb1ff040c733fc8aec",
							"checksum/secret":    "096418b76d08d2cef684a057baf583e95aae43a23a7a0dc6f65453e771b76328",
						},
					},
					Spec: core.PodSpec{
						Volumes: []core.Volume{
							{
								Name: "start-scripts",
								VolumeSource: core.VolumeSource{
									ConfigMap: &core.ConfigMapVolumeSource{
										LocalObjectReference: core.LocalObjectReference{
											Name: name + "-redis-scripts",
										},
										DefaultMode: ptr.Int32(493),
									},
								},
							},
							{
								Name: "health",
								VolumeSource: core.VolumeSource{
									ConfigMap: &core.ConfigMapVolumeSource{
										LocalObjectReference: core.LocalObjectReference{
											Name: name + "-redis-health",
										},
										DefaultMode: ptr.Int32(493),
									},
								},
							},
							{
								Name: "config",
								VolumeSource: core.VolumeSource{
									ConfigMap: &core.ConfigMapVolumeSource{
										LocalObjectReference: core.LocalObjectReference{
											Name: name + "-redis-configuration",
										},
									},
								},
							},
							{
								Name: "redis-tmp-conf",
								VolumeSource: core.VolumeSource{
									EmptyDir: &core.EmptyDirVolumeSource{},
								},
							},
						},
						Containers: []core.Container{
							{
								Name:  "redis",
								Image: "docker.io/bitnami/redis:6.2.7-debian-11-r3",
								Command: []string{
									"/bin/bash",
								},
								Args: []string{
									"-c",
									"/opt/bitnami/scripts/start-scripts/start-replica.sh",
								},
								Ports: []core.ContainerPort{
									{
										Name:          "redis",
										ContainerPort: 6379,
									},
								},
								Env: []core.EnvVar{
									{
										Name:  "BITNAMI_DEBUG",
										Value: "false",
									},
									{
										Name:  "REDIS_REPLICATION_MODE",
										Value: "slave",
									},
									{
										Name:  "REDIS_MASTER_HOST",
										Value: name + "-redis-master-0." + name + "-redis-headless." + namespace + ".svc.cluster.local",
									},
									{
										Name:  "REDIS_MASTER_PORT_NUMBER",
										Value: "6379",
									},
									{
										Name: "REDIS_PASSWORD",
										ValueFrom: &core.EnvVarSource{
											SecretKeyRef: &core.SecretKeySelector{
												LocalObjectReference: core.LocalObjectReference{
													Name: name + "-redis",
												},
												Key: "redis-password",
											},
										},
									},
									{
										Name: "REDIS_MASTER_PASSWORD",
										ValueFrom: &core.EnvVarSource{
											SecretKeyRef: &core.SecretKeySelector{
												LocalObjectReference: core.LocalObjectReference{
													Name: name + "-redis",
												},
												Key: "redis-password",
											},
										},
									},
									{
										Name:  "REDIS_TLS_ENABLED",
										Value: "no",
									},
									{
										Name:  "REDIS_PORT",
										Value: "6379",
									},
								},
								Resources: core.ResourceRequirements{
									Limits:   core.ResourceList{},
									Requests: core.ResourceList{},
								},
								VolumeMounts: []core.VolumeMount{
									{
										Name:      "start-scripts",
										MountPath: "/opt/bitnami/scripts/start-scripts",
									},
									{
										Name:      "health",
										MountPath: "/health",
									},
									{
										Name:      "redis-data",
										MountPath: "/data",
									},
									{
										Name:      "config",
										MountPath: "/opt/bitnami/redis/mounted-etc",
									},
									{
										Name:      "redis-tmp-conf",
										MountPath: "/opt/bitnami/redis/etc",
									},
								},
								LivenessProbe: &core.Probe{
									Handler: core.Handler{
										Exec: &core.ExecAction{
											Command: []string{
												"sh",
												"-c",
												"/health/ping_liveness_local_and_master.sh 5",
											},
										},
									},
									InitialDelaySeconds: 20,
									TimeoutSeconds:      6,
									PeriodSeconds:       5,
									SuccessThreshold:    1,
									FailureThreshold:    5,
								},
								ReadinessProbe: &core.Probe{
									Handler: core.Handler{
										Exec: &core.ExecAction{
											Command: []string{
												"sh",
												"-c",
												"/health/ping_readiness_local_and_master.sh 1",
											},
										},
									},
									InitialDelaySeconds: 20,
									TimeoutSeconds:      2,
									PeriodSeconds:       5,
									SuccessThreshold:    1,
									FailureThreshold:    5,
								},
								StartupProbe: &core.Probe{
									Handler: core.Handler{
										TCPSocket: &core.TCPSocketAction{
											Port: intstr.String("redis"),
										},
									},
									InitialDelaySeconds: 10,
									TimeoutSeconds:      5,
									PeriodSeconds:       10,
									SuccessThreshold:    1,
									FailureThreshold:    22,
								},
								ImagePullPolicy: "IfNotPresent",
								SecurityContext: &core.SecurityContext{
									RunAsUser: ptr.Int64(1001),
								},
							},
						},
						TerminationGracePeriodSeconds: ptr.Int64(30),
						ServiceAccountName:            name + "-redis",
						SecurityContext: &core.PodSecurityContext{
							FSGroup: ptr.Int64(1001),
						},
						Affinity: &core.Affinity{
							PodAntiAffinity: &core.PodAntiAffinity{
								PreferredDuringSchedulingIgnoredDuringExecution: []core.WeightedPodAffinityTerm{
									{
										Weight: 1,
										PodAffinityTerm: core.PodAffinityTerm{
											LabelSelector: &meta.LabelSelector{
												MatchLabels: map[string]string{
													"app.kubernetes.io/component": "replica",
													"app.kubernetes.io/instance":  name,
													"app.kubernetes.io/name":      "redis",
												},
											},
											Namespaces: []string{
												namespace,
											},
											TopologyKey: "kubernetes.io/hostname",
										},
									},
								},
							},
						},
					},
				},
				VolumeClaimTemplates: []core.PersistentVolumeClaim{
					{
						ObjectMeta: meta.ObjectMeta{
							Name: "redis-data",
							Labels: map[string]string{
								"app.kubernetes.io/component": "replica",
								"app.kubernetes.io/instance":  name,
								"app.kubernetes.io/name":      "redis",
							},
						},
						Spec: core.PersistentVolumeClaimSpec{
							AccessModes: []core.PersistentVolumeAccessMode{
								"ReadWriteOnce",
							},
							Resources: core.ResourceRequirements{
								Requests: core.ResourceList{
									"storage": "8Gi",
								},
							},
						},
					},
				},
				ServiceName: name + "-redis-headless",
				UpdateStrategy: apps.StatefulSetUpdateStrategy{
					Type:          "RollingUpdate",
					RollingUpdate: &apps.RollingUpdateStatefulSetStrategy{},
				},
			},
		},
	}
}

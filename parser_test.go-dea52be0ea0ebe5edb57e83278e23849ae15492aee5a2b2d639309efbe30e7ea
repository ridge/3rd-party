// PUBLISH-CODE
/*
Copyright 2014 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This code is taken from github.com/kubernetes/apimachinery/pkg/api/resource/quantity_test.go
// and modified.

package quantity

import (
	"testing"

	"github.com/stretchr/testify/require"
)

func TestValidateOK(t *testing.T) {
	for _, s := range []string{"0", "-2", "1", "1.1", "+7", "1Gi", "500M", "1E", "100.1E20", ".7k", "6.E", "100m"} {
		require.NoError(t, validate(s))
	}
}

// test taken and modified from https://github.com/kubernetes/apimachinery, pkg/api/resource/quantity_test.go
func TestParse(t *testing.T) {
	if _, err := parse("", 0); err == nil {
		t.Errorf("expected empty string to return error")
	}

	table := []struct {
		input  string
		expect int64
	}{
		{"0", 0},
		{"0n", 0},
		{"0u", 0},
		{"0m", 0},
		{"0Ki", 0},
		{"0k", 0},
		{"0Mi", 0},
		{"0M", 0},
		{"0Gi", 0},
		{"0G", 0},
		{"0Ti", 0},
		{"0T", 0},

		// Quantity-less numbers are allowed
		{"1", 1},

		// Binary suffixes
		{"1Ki", 1024},
		{"8Ki", 8192},
		{"7Mi", 7340032},
		{"6Gi", 6442450944},
		{"5Ti", 5497558138880},
		{"4Pi", 4503599627370496},
		{"3Ei", 3458764513820540928},

		{"10Ti", 10995116277760},
		{"100Ti", 109951162777600},

		// Decimal suffixes
		{"5n", 1},
		{"4u", 1},
		{"3m", 1},
		{"9", 9},
		{"8k", 8000},
		{"50k", 50000},
		{"7M", 7000000},
		{"6G", 6000000000},
		{"5T", 5000000000000},
		{"40T", 40000000000000},
		{"300T", 300000000000000},
		{"2P", 2000000000000000},
		{"1E", 1000000000000000000},

		// Decimal exponents
		{"1E-3", 1},
		{"1e3", 1000},
		{"1E6", 1000000},
		{"1e9", 1000000000},
		{"1E12", 1000000000000},
		{"1e15", 1000000000000000},
		{"1E18", 1000000000000000000},

		// Nonstandard but still parsable
		{"1e14", 100000000000000},
		{"1e13", 10000000000000},
		{"1e3", 1000},
		{"100.035k", 100035},

		// Things that look like floating point
		{"0.001", 1},
		{"0.0005k", 1},
		{"0.005", 1},
		{"0.05", 1},
		{"0.5", 1},
		{"0.00050k", 1},
		{"0.00500", 1},
		{"0.05000", 1},
		{"0.50000", 1},
		{"0.5e0", 1},
		{"0.5e-1", 1},
		{"0.5e-2", 1},
		{"0.5e0", 1},
		{"10.035M", 10035000},

		{"1.2e3", 1200},
		{"1.3E+6", 1300000},
		{"1.40e9", 1400000000},
		{"1.53E12", 1530000000000},
		{"1.6e15", 1600000000000000},
		{"1.7E18", 1700000000000000000},

		{"9.01", 10},
		{"8.1k", 8100},
		{"7.123456M", 7123456},
		{"6.987654321G", 6987654321},
		{"5.444T", 5444000000000},
		{"40.1T", 40100000000000},
		{"300.2T", 300200000000000},
		{"2.5P", 2500000000000000},
		{"1.01E", 1010000000000000000},

		// Things that saturate/round
		{"3.001n", 1},
		{"1.1E-9", 1},
		{"0.0000000001", 1},
		{"0.0000000005", 1},
		{"0.00000000050", 1},
		{"0.5e-9", 1},
		{"0.9n", 1},
		{"0.00000012345", 1},
		{"0.00000012354", 1},
		{"9Ei", 9223372036854775807},
		{"9223372036854775807Ki", 9223372036854775807},
		{"12E", 9223372036854775807},

		// We'll accept fractional binary stuff, too.
		{"100.035Ki", 102436},
		{"0.5Mi", 524288},
		{"0.05Gi", 53687092},
		{"0.025Ti", 27487790695},

		// Things written by trolls
		{"0.000000000001Ki", 1},
		{".001", 1},
		{".0001k", 1},
		{"1.", 1},
		{"1.G", 1000000000},
	}

	for _, item := range table {
		got, err := parse(item.input, 0)
		if err != nil {
			t.Errorf("%v: unexpected error: %v", item.input, err)
			continue
		}
		if item.expect != got {
			t.Errorf("%v: expected %d, got %d", item.input, item.expect, got)
		}
	}

	invalid := []string{
		"1.1.M",
		"1+1.0M",
		"0.1mi",
		"0.1am",
		"aoeu",
		".5i",
		"1i",
		"-3.01i",
		"-3.01e-",

		// trailing whitespace is forbidden
		" 1",
		"1 ",
	}
	for _, item := range invalid {
		_, err := parse(item, 0)
		if err == nil {
			t.Errorf("%v parsed unexpectedly", item)
		}
	}
}

func TestParseDifferentScales(t *testing.T) {
	table := []struct {
		input       string
		outputScale int32
		expect      int64
	}{
		{"5300m", 1, 1},
		{"5300m", 0, 6},
		{"5300m", -1, 53},
		{"5300m", -2, 530},
		{"5300m", -3, 5300},
	}

	for _, item := range table {
		got, err := parse(item.input, item.outputScale)
		if err != nil {
			t.Errorf("%v: unexpected error: %v", item.input, err)
			continue
		}
		if item.expect != got {
			t.Errorf("%v: expected %d, got %d", item.input, item.expect, got)
		}
	}
}
